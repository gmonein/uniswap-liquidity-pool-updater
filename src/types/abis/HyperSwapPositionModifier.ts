/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface HyperSwapPositionModifierInterface extends Interface {
  getFunction(nameOrSignature: "rebalance"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      {
        token0: AddressLike;
        token1: AddressLike;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        param6: BigNumberish;
        param7: BigNumberish;
        param8: BigNumberish;
        param9: BigNumberish;
        wallet: AddressLike;
        deadline: BigNumberish;
      },
      BigNumberish,
      BytesLike,
      boolean,
      {
        token0FeeAmount: BigNumberish;
        token1FeeAmount: BigNumberish;
        tokenOut: AddressLike;
        tokenOutMin: BigNumberish;
        swapData0: BytesLike;
        swapData1: BytesLike;
        isUnwrapNative: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
}

export interface HyperSwapPositionModifier extends BaseContract {
  connect(runner?: ContractRunner | null): HyperSwapPositionModifier;
  waitForDeployment(): Promise<this>;

  interface: HyperSwapPositionModifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  rebalance: TypedContractMethod<
    [
      params: {
        token0: AddressLike;
        token1: AddressLike;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        param6: BigNumberish;
        param7: BigNumberish;
        param8: BigNumberish;
        param9: BigNumberish;
        wallet: AddressLike;
        deadline: BigNumberish;
      },
      poolId: BigNumberish,
      data: BytesLike,
      zeroForOne: boolean,
      extraParams: {
        token0FeeAmount: BigNumberish;
        token1FeeAmount: BigNumberish;
        tokenOut: AddressLike;
        tokenOutMin: BigNumberish;
        swapData0: BytesLike;
        swapData1: BytesLike;
        isUnwrapNative: boolean;
      }
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      params: {
        token0: AddressLike;
        token1: AddressLike;
        fee: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        param6: BigNumberish;
        param7: BigNumberish;
        param8: BigNumberish;
        param9: BigNumberish;
        wallet: AddressLike;
        deadline: BigNumberish;
      },
      poolId: BigNumberish,
      data: BytesLike,
      zeroForOne: boolean,
      extraParams: {
        token0FeeAmount: BigNumberish;
        token1FeeAmount: BigNumberish;
        tokenOut: AddressLike;
        tokenOutMin: BigNumberish;
        swapData0: BytesLike;
        swapData1: BytesLike;
        isUnwrapNative: boolean;
      }
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
